{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Fuzzy expansions for :e and :E","name":"fuzzee.vim","body":"Fuzzee.vim will tab-complete paths relative to the current working directory in\r\nVim and also the current buffer for use with `:e[dit]`, `:E[xplore]`, and many\r\nother splitting options. It also ignores files, directories, and filetypes\r\nlisted in the user-defined `wildignore` setting and has support for\r\nmulti-directory globbing and custom-path mappings.\r\n\r\n\r\nInstall\r\n-------\r\n\r\nInstall with [vim-pathogen](https://github.com/tpope/vim-pathogen) in your\r\nconfigured bundles folder.\r\n\r\nOr you can extract `fuzzee.vim` from `plugins/` and place it in your\r\n`~/.vim/plugins/` directory with the others.\r\n\r\n\r\nUsage\r\n-----\r\n\r\nThe `:F` command can be given any fuzzily-typed string that, when expanded,\r\nmatches some filepath on your system.\r\n\r\nIt accepts 3 different types of arguments:\r\n\r\n* Strings that expand to files relevant to the current buffer\r\n* The same but ones directly in the root of the current working directory\r\n* Absolute paths\r\n\r\nLet's give an example working directory and how `:F` can be used to navigate\r\naround it depending on what file you're currently viewing. Say the `cwd`, or\r\ncurrent working directory, looks something like:\r\n\r\n**~/Dropbox/dev/project**\r\n\r\n    app/\r\n        coffeescripts/\r\n    ******  application.coffee ******\r\n            models.coffee\r\n            collections.coffee\r\n    lib/\r\n        scripts.js\r\n    public/\r\n        stylesheets/\r\n            sass/\r\n            css/\r\n        javascripts/\r\n            application.js\r\n            models.js\r\n            collections.js\r\n    Cakefile\r\n\r\nFirst we'll use `:F` to  get to the working directory from a new Vim session in\r\nyour home directory. Any of the following are sufficient:\r\n\r\n    :F ~/dr/de/pro  \" search for /Users/you/*d*r*/*d*e*/*p*r*o*\r\n    :F `*dro*oje    \" globs for any *o*j*e* under /Users/you/*d*r*o*/**/\r\n    :F dr*project   \" search for any filepath *d*r**/*p*r*o*j*e*c*t* under the cwd\r\n\r\nThen `:FL` will change the local working directory to the project path or\r\nwhatever directory the current buffer is in. `:FL` and `:FC` both accept\r\narguments as well.\r\n\r\nA quick `:F */alcf` will glob the current working directory for `*a*l*c*f*` to\r\nedit `app/coffeescripts/application.coffee`.\r\n\r\nBy hitting `:F <TAB>`, Fuzzee.vim will show you everything in the current\r\nbuffer's directory first but that's only if you give it no arguments. This will\r\nbe everything in `app/coffeescripts/`. To edit `models.coffee`, type `:F md`.\r\nRemember, by default it will always refer first in relation to the current\r\nbuffer and if no matches are found then show the current working directory.\r\n\r\n`:F ./` will search for anything in the current working directory.  However,\r\nit's not always necessary. All of the following work to edit the `Cakefile` from\r\nthe currently edited .coffee file:\r\n\r\n    :F cak          \" search in the directory above the buffer for *c*a*k*. if \r\n                    \" nothing is found, then search the current working directory.\r\n    :F ./ckf        \" search in the current working directory for *c*k*f*\r\n    :F */cake       \" glob for any filepath of *c*a*k*e* under the cwd\r\n\r\nRespectively, `:F ../` will search for anything in the directory above what\r\nyou're currently editing. So at `app/coffeescripts/application.coffee`, then that\r\nwill look in `app/coffeescripts`.\r\n\r\nTo open directories quickly, Fuzzee.vim can also be invoked with no arguments or\r\njust `.`\r\n    \r\n    :F              \" opens up the directory above the current buffer\r\n    :F .            \" open the current working directory\r\n\r\nSay you just `:quit` the application.coffee file in vim but you want to open it\r\nback up quickly.\r\n\r\n    :FB applcof     \" open a buffer with matching fuzzy string \"*a*p*p*l*c*o*f*\"\r\n                    \" either as a relation to the cwd or full path\r\n\r\nThe fuzzy-expansion works for any filepath on your system no matter where you\r\nare but it can always backtrace to the current working directory as well.\r\nPrimarily, it searches in relation to what you're currently viewing.\r\n\r\n\r\nCommands\r\n--------\r\n\r\n* `:F `  - open a fuzzy-string filepath\r\n* `:FS` - open up in a split\r\n* `:FV` - open in a vertical split\r\n* `:FT` - open in a new tab\r\n* `:FL` - change local working directory\r\n* `:FC` - change working directory\r\n* `:FB` - open a hidden or switch to an active buffer\r\n\r\n\r\nPath Mappings\r\n--------\r\nFuzzee.vim can be used for exploring common project filepaths and directories\r\nquickly with a cmapping. For instance, to match any javascripts in your `public`\r\ndirectory, try out the following:\r\n\r\n```vim\r\nset wcm=<C-z> \" this is just a way to map <Tab> completion\r\nFuzzeeMap ,js javascript\r\nFuzzeeMap ,cs css\r\nFuzzeeMap ,st specs/spec\r\n```\r\n\r\nHow this works is that you'd type in `:F mod,js` which would then expand and\r\ntab-complete to `:F javascript/model.js` or whatever file matches `*m*o*d*`. If\r\nyou just want to explore the directory, `:F ,js` will show a menu of files in\r\nthe javascript directory.\r\n\r\nIf you have multiple directories of the same name, remember you can specify from\r\nthe root with a prepended `./` as `./javascript`.  Lastly, if you just want to\r\nglob down from a certain path in your project you can use a mapping like\r\n`FuzzeeMap ,js app/javascript*` which will look through all folders from that\r\nstarting point.\r\n\r\nTo set default mappings in your `vimrc`, use the following:\r\n\r\n```vim\r\ncall fuzzee#map(',ac', 'app/coffeescripts')\r\ncall fuzzee#map(',js', 'javascript')\r\ncall fuzzee#map(',cs', 'css')\r\n```\r\n\r\nMake sure to read the next section for recommended wildmenu options.\r\n\r\n\r\nTips\r\n----\r\n\r\nSome recommended vimrc settings:\r\n\r\n```vim\r\nnnoremap <Leader>f :F<Space>\r\nnnoremap <Leader>t :F */\r\nset wildmode=list:longest,full\r\nset wildmenu\r\nset wildignore+=\r\n    \\*.png,*.jpg,*.pdf,\r\n    \\CVS,SVN,\r\n    \\\" more files to ignore here\r\nset switchbuf=usetab\r\n```\r\n\r\n* Vim has a global working directory `:cd` and a local to window (that includes\r\nsplits) working directory `:lcd`. Use these for making project paths relative\r\nas `app/dir` and not absolute like `/Users/foo/dev/app/dir`.\r\n\r\n* Hitting `<C-w>` with any expanded path deletes back to the last word - use to\r\nmove up directories quickly.\r\n\r\n* The `'switchbuf'` setting allows the `:FB` command to find files in other tabs or\r\nsplits with a matching fuzzy-name. If the buffer is hidden (a file that was `:q`)\r\nthen the command will just open the buffer in the current window.\r\n\r\nLinks\r\n-----\r\n\r\n[GitHub Repo](http://github.com/mattsa/vim-fuzzee/)  \r\n[vim.org](http://www.vim.org/scripts/script.php?script_id=3716)  \r\n[Github Author](http://github.com/mattsa)  \r\n[Twitter](http://twitter.com/mattsa)"}